package com.terrorAndBlue.rightClickOptions;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

import com.terrorAndBlue.rightClickOptions.event.VanillaEventHandler;
import com.terrorAndBlue.rightClickOptions.gui.GuiHandler;
import com.terrorAndBlue.rightClickOptions.gui.RightClickGUI;
import com.terrorAndBlue.rightClickOptions.gui.TradeGUI;
import com.terrorAndBlue.rightClickOptions.packet.GuiActionPacket;
import com.terrorAndBlue.rightClickOptions.packet.InteractServerPacket;
import com.terrorAndBlue.rightClickOptions.packet.InteractServerResponsePacket;
import com.terrorAndBlue.rightClickOptions.packet.SessionCheckPacket;
import com.terrorAndBlue.rightClickOptions.packet.SessionCheckResponsePacket;
import com.terrorAndBlue.rightClickOptions.proxy.CommonProxy;
import com.terrorAndBlue.rightClickOptions.trade.TradeContainer;
import com.terrorAndBlue.rightClickOptions.trade.TradeInventory;
import com.terrorAndBlue.rightClickOptions.trade.TradeOffer;
import com.terrorAndBlue.rightClickOptions.trade.TradeSession;
import com.terrorAndBlue.rightClickOptions.util.Util;

import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.client.Minecraft;
import net.minecraft.client.model.ModelZombie;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.item.EntityItemFrame;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.Item;
import net.minecraft.item.Item.ToolMaterial;
import net.minecraft.item.ItemArmor;
import net.minecraft.item.ItemArmor.ArmorMaterial;
import net.minecraft.item.ItemStack;
import net.minecraft.util.AxisAlignedBB;
import net.minecraft.util.MovingObjectPosition;
import net.minecraft.util.Vec3;
import net.minecraft.util.MovingObjectPosition.MovingObjectType;
import net.minecraft.world.World;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.common.util.EnumHelper;
import cpw.mods.fml.client.registry.RenderingRegistry;
import cpw.mods.fml.common.FMLCommonHandler;
import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.Mod.EventHandler;
import cpw.mods.fml.common.Mod.Instance;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.SidedProxy;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.event.FMLServerStartingEvent;
import cpw.mods.fml.common.network.IGuiHandler;
import cpw.mods.fml.common.network.NetworkRegistry;
import cpw.mods.fml.common.network.simpleimpl.SimpleNetworkWrapper;
import cpw.mods.fml.common.registry.EntityRegistry;
import cpw.mods.fml.common.registry.GameData;
import cpw.mods.fml.common.registry.GameRegistry;
import cpw.mods.fml.common.registry.LanguageRegistry;
import cpw.mods.fml.relauncher.Side;

@Mod
(
	modid						= RightClickOptions.MODID,
	name 						= RightClickOptions.NAME,
	version 					= RightClickOptions.VERSION,
	dependencies 				= "required-after:Forge@[10.13.1.1217,)",
	acceptedMinecraftVersions	= "[1.7.10,)",
	canBeDeactivated = false
)
public class RightClickOptions
{
	/*		
		\u00A70   = Black
		\u00A71   = Dark Blue
		\u00A72   = Dark Green
		\u00A73   = Dark Cyan
		\u00A74   = Dark Red
		\u00A75   = Purple
		\u00A76   = Orange
		\u00A77   = Light Grey
		\u00A78   = Dark Grey
		\u00A7a   = Light Green
		\u00A7b   = Light Cyan
		\u00A7c   = Light Red
		\u00A7d   = Pink
		\u00A7e   = Yellow
		\u00A7f   = White
	*/
	
    public static final String VERSION = "1.5";
    public static final String MODID = "RightClickOptions";
    public static final String NAME = "Right Click Options";
    
    public static final int GUI_CLOSED_ID = 0x624;
    
    public static final HashMap<TradeOffer, EntityPlayer> tradeOffers = new HashMap<TradeOffer, EntityPlayer>();
    public static final HashMap<EntityPlayer, EntityPlayer> interactTargets = new HashMap<EntityPlayer, EntityPlayer>();
    
    public static final List<TradeSession> tradeSessions = new ArrayList<TradeSession>();
    
    @Instance(MODID)
    public static RightClickOptions instance;

    @SidedProxy (clientSide = "com.terrorAndBlue.rightClickOptions.proxy.ClientProxy", serverSide = "com.terrorAndBlue.rightClickOptions.proxy.CommonProxy")
    public static CommonProxy proxy;
    public static SimpleNetworkWrapper wrapper;
    
    @EventHandler
    public void preInit(FMLPreInitializationEvent preInitEvent)
    {
    	ModMetadata meta = preInitEvent.getModMetadata();
    	meta.modId=MODID;
    	meta.name=NAME;
    	meta.version=VERSION;
    	meta.description="RCO is a mod which allows the player to do certain actions by simply right clicking another player (with no item in hand).";
    	meta.url="";
    	meta.updateUrl="";
    	meta.authorList=Arrays.asList (new String[] { "Terror Above", "Bluesnake198" });
    	meta.credits="Programmed by Terror, textured by Bluesnake";
    	meta.logoFile="";//relative to the location of the mcmod.info file
    	
    	MinecraftForge.EVENT_BUS.register(new VanillaEventHandler());
    	
    	wrapper = NetworkRegistry.INSTANCE.newSimpleChannel(MODID);
    	wrapper.registerMessage(GuiActionPacket.Handler.class, GuiActionPacket.class, 0, Side.SERVER);
    	wrapper.registerMessage(InteractServerPacket.Handler.class, InteractServerPacket.class, 1, Side.SERVER);
    	wrapper.registerMessage(SessionCheckResponsePacket.Handler.class, SessionCheckResponsePacket.class, 2, Side.SERVER);
    	wrapper.registerMessage(InteractServerResponsePacket.Handler.class, InteractServerResponsePacket.class, 3, Side.CLIENT);
		wrapper.registerMessage(SessionCheckPacket.Handler.class, SessionCheckPacket.class, 4, Side.CLIENT);
		
		proxy.preInit();//does nothing at the moment
    }
    
    @EventHandler
    public void init(FMLInitializationEvent event)
    {
    	NetworkRegistry.INSTANCE.registerGuiHandler(instance, new GuiHandler());
    }
    
    @EventHandler
    public void serverLoad(FMLServerStartingEvent event)
    {
    	
    }
    
    public static double roundToSignificantFigures(double num, int n) {
        if(num == 0) {
            return 0;
        }

        final double d = Math.ceil(Math.log10(num < 0 ? -num: num));
        final int power = n - (int) d;

        final double magnitude = Math.pow(10, power);
        final long shifted = Math.round(num*magnitude);
        return shifted/magnitude;
    }
    
    //CLIENT only
    public static final EntityLivingBase getTarget(float par1, double distance)
	{
	    Minecraft mc = Minecraft.getMinecraft();

	    Entity pointedEntity;
	    double d0 = distance;
	    MovingObjectPosition omo = mc.renderViewEntity.rayTrace(d0, par1);
	    double d1 = d0;
	    Vec3 vec3 = mc.renderViewEntity.getPosition(par1);
	    Vec3 vec31 = mc.renderViewEntity.getLook(par1);
	    Vec3 vec32 = vec3.addVector(vec31.xCoord * d0, vec31.yCoord * d0, vec31.zCoord * d0);
	    pointedEntity = null;
	    Vec3 vec33 = null;
	    float f1 = 1.0F;
	    List list = mc.theWorld.getEntitiesWithinAABBExcludingEntity(mc.renderViewEntity, mc.renderViewEntity.boundingBox.addCoord(vec31.xCoord * d0, vec31.yCoord * d0, vec31.zCoord * d0).expand((double)f1, (double)f1, (double)f1));
	    double d2 = d1;

	    for (int i = 0; i < list.size(); ++i)
	    {
	        Entity entity = (Entity)list.get(i);

	        if (entity.canBeCollidedWith())
	        {
	            float f2 = entity.getCollisionBorderSize();
	            AxisAlignedBB axisalignedbb = entity.boundingBox.expand((double)f2, (double)f2, (double)f2);
	            MovingObjectPosition movingobjectposition = axisalignedbb.calculateIntercept(vec3, vec32);

	            if (axisalignedbb.isVecInside(vec3))
	            {
	                if (0.0D < d2 || d2 == 0.0D)
	                {
	                    pointedEntity = entity;
	                    vec33 = movingobjectposition == null ? vec3 : movingobjectposition.hitVec;
	                    d2 = 0.0D;
	                }
	            }
	            else if (movingobjectposition != null)
	            {
	                double d3 = vec3.distanceTo(movingobjectposition.hitVec);

	                if (d3 < d2 || d2 == 0.0D)
	                {
	                    if (entity == mc.renderViewEntity.ridingEntity && !entity.canRiderInteract())
	                    {
	                        if (d2 == 0.0D)
	                        {
	                            pointedEntity = entity;
	                            vec33 = movingobjectposition.hitVec;
	                        }
	                    }
	                    else
	                    {
	                        pointedEntity = entity;
	                        vec33 = movingobjectposition.hitVec;
	                        d2 = d3;
	                    }
	                }
	            }
	        }
	    }
	    if (pointedEntity != null && (d2 < d1 || omo == null))
	    {
	        omo = new MovingObjectPosition(pointedEntity, vec33);

	        if (pointedEntity instanceof EntityLivingBase || pointedEntity instanceof EntityItemFrame)
	        {
	            mc.pointedEntity = pointedEntity;
	        }
	    }
	    if (omo != null)
	    {
	        if (omo.typeOfHit == MovingObjectType.ENTITY)
	        {
	            if(omo.entityHit instanceof EntityLivingBase)
	            {
	                return (EntityLivingBase)omo.entityHit;
	            }
	        }
	    }
	    return null;
	}
    
    public static EntityLivingBase closestELBToPoint(World world, double x, double y, double z, double offset)
    {
    	List list = world.getEntitiesWithinAABB(EntityLivingBase.class, AxisAlignedBB.getBoundingBox(x-offset, y-offset, z-offset, x+offset, y+offset, z+offset));
    	
    	double smallDist = Double.MAX_VALUE;
    	EntityLivingBase closest = null;
    	
    	for(Object object : list)
    	{
    		if(object instanceof EntityLivingBase)
    		{
    			EntityLivingBase elb = (EntityLivingBase)object;
    			double dist = elb.getDistance(x, y, z);
    			
    			if(dist < smallDist)
    			{
    				smallDist = dist;
    				closest = elb;
    			}
    		}
    	}
    	return closest;
    }
    
    public static int getColorForRGB(int red, int green, int blue)
    {
    	return new Color(red, green, blue).getRGB();
    }
    
    public static int getColorForRGB(Color c)
    {
    	return c.getRGB();
    }
}